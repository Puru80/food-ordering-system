/*
 * This file is generated by jOOQ.
 */
package com.bros.fooforderingsystem.model.tables;


import com.bros.fooforderingsystem.model.Keys;
import com.bros.fooforderingsystem.model.Public;
import com.bros.fooforderingsystem.model.tables.records.OrderRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Order extends TableImpl<OrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.order</code>
     */
    public static final Order ORDER = new Order();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderRecord> getRecordType() {
        return OrderRecord.class;
    }

    /**
     * The column <code>public.order.id</code>.
     */
    public final TableField<OrderRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order.student_id</code>.
     */
    public final TableField<OrderRecord, String> STUDENT_ID = createField(DSL.name("student_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.order.vendor_id</code>.
     */
    public final TableField<OrderRecord, UUID> VENDOR_ID = createField(DSL.name("vendor_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order.status</code>.
     */
    public final TableField<OrderRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.order.otp</code>.
     */
    public final TableField<OrderRecord, String> OTP = createField(DSL.name("otp"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.order.created_at</code>.
     */
    public final TableField<OrderRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.order.updated_at</code>.
     */
    public final TableField<OrderRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private Order(Name alias, Table<OrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Order(Name alias, Table<OrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.order</code> table reference
     */
    public Order(String alias) {
        this(DSL.name(alias), ORDER);
    }

    /**
     * Create an aliased <code>public.order</code> table reference
     */
    public Order(Name alias) {
        this(alias, ORDER);
    }

    /**
     * Create a <code>public.order</code> table reference
     */
    public Order() {
        this(DSL.name("order"), null);
    }

    public <O extends Record> Order(Table<O> child, ForeignKey<O, OrderRecord> key) {
        super(child, key, ORDER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<OrderRecord> getPrimaryKey() {
        return Keys.ORDER_PKEY;
    }

    @Override
    public List<UniqueKey<OrderRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderRecord>>asList(Keys.ORDER_PKEY);
    }

    @Override
    public List<ForeignKey<OrderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrderRecord, ?>>asList(Keys.ORDER__ORDER_STUDENT_ID_FKEY, Keys.ORDER__ORDER_VENDOR_ID_FKEY);
    }

    private transient Student _student;
    private transient Vendor _vendor;

    public Student student() {
        if (_student == null)
            _student = new Student(this, Keys.ORDER__ORDER_STUDENT_ID_FKEY);

        return _student;
    }

    public Vendor vendor() {
        if (_vendor == null)
            _vendor = new Vendor(this, Keys.ORDER__ORDER_VENDOR_ID_FKEY);

        return _vendor;
    }

    @Override
    public Order as(String alias) {
        return new Order(DSL.name(alias), this);
    }

    @Override
    public Order as(Name alias) {
        return new Order(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(String name) {
        return new Order(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(Name name) {
        return new Order(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, String, UUID, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
