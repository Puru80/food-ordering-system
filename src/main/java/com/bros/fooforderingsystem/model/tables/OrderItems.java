/*
 * This file is generated by jOOQ.
 */
package com.bros.fooforderingsystem.model.tables;


import com.bros.fooforderingsystem.model.Keys;
import com.bros.fooforderingsystem.model.Public;
import com.bros.fooforderingsystem.model.tables.records.OrderItemsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderItems extends TableImpl<OrderItemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.order_items</code>
     */
    public static final OrderItems ORDER_ITEMS = new OrderItems();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderItemsRecord> getRecordType() {
        return OrderItemsRecord.class;
    }

    /**
     * The column <code>public.order_items.id</code>.
     */
    public final TableField<OrderItemsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_items.order_id</code>.
     */
    public final TableField<OrderItemsRecord, UUID> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_items.item_id</code>.
     */
    public final TableField<OrderItemsRecord, UUID> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_items.quantity</code>.
     */
    public final TableField<OrderItemsRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.order_items.created_at</code>.
     */
    public final TableField<OrderItemsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.order_items.updated_at</code>.
     */
    public final TableField<OrderItemsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private OrderItems(Name alias, Table<OrderItemsRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderItems(Name alias, Table<OrderItemsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.order_items</code> table reference
     */
    public OrderItems(String alias) {
        this(DSL.name(alias), ORDER_ITEMS);
    }

    /**
     * Create an aliased <code>public.order_items</code> table reference
     */
    public OrderItems(Name alias) {
        this(alias, ORDER_ITEMS);
    }

    /**
     * Create a <code>public.order_items</code> table reference
     */
    public OrderItems() {
        this(DSL.name("order_items"), null);
    }

    public <O extends Record> OrderItems(Table<O> child, ForeignKey<O, OrderItemsRecord> key) {
        super(child, key, ORDER_ITEMS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<OrderItemsRecord> getPrimaryKey() {
        return Keys.ORDER_ITEMS_PKEY;
    }

    @Override
    public List<UniqueKey<OrderItemsRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderItemsRecord>>asList(Keys.ORDER_ITEMS_PKEY);
    }

    @Override
    public List<ForeignKey<OrderItemsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrderItemsRecord, ?>>asList(Keys.ORDER_ITEMS__ORDER_ITEMS_ORDER_ID_FKEY, Keys.ORDER_ITEMS__ORDER_ITEMS_ITEM_ID_FKEY);
    }

    private transient Order _order;
    private transient Item _item;

    public Order order() {
        if (_order == null)
            _order = new Order(this, Keys.ORDER_ITEMS__ORDER_ITEMS_ORDER_ID_FKEY);

        return _order;
    }

    public Item item() {
        if (_item == null)
            _item = new Item(this, Keys.ORDER_ITEMS__ORDER_ITEMS_ITEM_ID_FKEY);

        return _item;
    }

    @Override
    public OrderItems as(String alias) {
        return new OrderItems(DSL.name(alias), this);
    }

    @Override
    public OrderItems as(Name alias) {
        return new OrderItems(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderItems rename(String name) {
        return new OrderItems(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderItems rename(Name name) {
        return new OrderItems(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, UUID, UUID, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
