/*
 * This file is generated by jOOQ.
 */
package com.bros.fooforderingsystem.model.tables.daos;


import com.bros.fooforderingsystem.model.tables.Item;
import com.bros.fooforderingsystem.model.tables.records.ItemRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ItemDao extends DAOImpl<ItemRecord, com.bros.fooforderingsystem.model.tables.pojos.Item, UUID> {

    /**
     * Create a new ItemDao without any configuration
     */
    public ItemDao() {
        super(Item.ITEM, com.bros.fooforderingsystem.model.tables.pojos.Item.class);
    }

    /**
     * Create a new ItemDao with an attached configuration
     */
    public ItemDao(Configuration configuration) {
        super(Item.ITEM, com.bros.fooforderingsystem.model.tables.pojos.Item.class, configuration);
    }

    @Override
    public UUID getId(com.bros.fooforderingsystem.model.tables.pojos.Item object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Item> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Item.ITEM.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Item> fetchById(UUID... values) {
        return fetch(Item.ITEM.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bros.fooforderingsystem.model.tables.pojos.Item fetchOneById(UUID value) {
        return fetchOne(Item.ITEM.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Item> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Item.ITEM.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Item> fetchByName(String... values) {
        return fetch(Item.ITEM.NAME, values);
    }

    /**
     * Fetch records that have <code>price BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Item> fetchRangeOfPrice(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Item.ITEM.PRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Item> fetchByPrice(Double... values) {
        return fetch(Item.ITEM.PRICE, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Item> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Item.ITEM.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Item> fetchByDescription(String... values) {
        return fetch(Item.ITEM.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>image BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Item> fetchRangeOfImage(String lowerInclusive, String upperInclusive) {
        return fetchRange(Item.ITEM.IMAGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>image IN (values)</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Item> fetchByImage(String... values) {
        return fetch(Item.ITEM.IMAGE, values);
    }

    /**
     * Fetch records that have <code>vendor_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Item> fetchRangeOfVendorId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Item.ITEM.VENDOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>vendor_id IN (values)</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Item> fetchByVendorId(UUID... values) {
        return fetch(Item.ITEM.VENDOR_ID, values);
    }

    /**
     * Fetch records that have <code>preparationtime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Item> fetchRangeOfPreparationtime(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Item.ITEM.PREPARATIONTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>preparationtime IN (values)</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Item> fetchByPreparationtime(Integer... values) {
        return fetch(Item.ITEM.PREPARATIONTIME, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Item> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Item.ITEM.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Item> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Item.ITEM.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Item> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Item.ITEM.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Item> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Item.ITEM.UPDATED_AT, values);
    }
}
