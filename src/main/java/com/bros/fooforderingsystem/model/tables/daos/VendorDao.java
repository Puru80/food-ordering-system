/*
 * This file is generated by jOOQ.
 */
package com.bros.fooforderingsystem.model.tables.daos;


import com.bros.fooforderingsystem.model.tables.Vendor;
import com.bros.fooforderingsystem.model.tables.records.VendorRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VendorDao extends DAOImpl<VendorRecord, com.bros.fooforderingsystem.model.tables.pojos.Vendor, UUID> {

    /**
     * Create a new VendorDao without any configuration
     */
    public VendorDao() {
        super(Vendor.VENDOR, com.bros.fooforderingsystem.model.tables.pojos.Vendor.class);
    }

    /**
     * Create a new VendorDao with an attached configuration
     */
    public VendorDao(Configuration configuration) {
        super(Vendor.VENDOR, com.bros.fooforderingsystem.model.tables.pojos.Vendor.class, configuration);
    }

    @Override
    public UUID getId(com.bros.fooforderingsystem.model.tables.pojos.Vendor object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Vendor> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Vendor.VENDOR.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Vendor> fetchById(UUID... values) {
        return fetch(Vendor.VENDOR.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bros.fooforderingsystem.model.tables.pojos.Vendor fetchOneById(UUID value) {
        return fetchOne(Vendor.VENDOR.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Vendor> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Vendor.VENDOR.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Vendor> fetchByName(String... values) {
        return fetch(Vendor.VENDOR.NAME, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Vendor> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Vendor.VENDOR.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Vendor> fetchByEmail(String... values) {
        return fetch(Vendor.VENDOR.EMAIL, values);
    }

    /**
     * Fetch records that have <code>location BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Vendor> fetchRangeOfLocation(String lowerInclusive, String upperInclusive) {
        return fetchRange(Vendor.VENDOR.LOCATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>location IN (values)</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Vendor> fetchByLocation(String... values) {
        return fetch(Vendor.VENDOR.LOCATION, values);
    }

    /**
     * Fetch records that have <code>acceptingorders BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Vendor> fetchRangeOfAcceptingorders(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Vendor.VENDOR.ACCEPTINGORDERS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>acceptingorders IN (values)</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Vendor> fetchByAcceptingorders(Boolean... values) {
        return fetch(Vendor.VENDOR.ACCEPTINGORDERS, values);
    }

    /**
     * Fetch records that have <code>qrcode BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Vendor> fetchRangeOfQrcode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Vendor.VENDOR.QRCODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>qrcode IN (values)</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Vendor> fetchByQrcode(String... values) {
        return fetch(Vendor.VENDOR.QRCODE, values);
    }

    /**
     * Fetch records that have <code>shopimage BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Vendor> fetchRangeOfShopimage(String lowerInclusive, String upperInclusive) {
        return fetchRange(Vendor.VENDOR.SHOPIMAGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>shopimage IN (values)</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Vendor> fetchByShopimage(String... values) {
        return fetch(Vendor.VENDOR.SHOPIMAGE, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Vendor> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Vendor.VENDOR.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Vendor> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Vendor.VENDOR.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Vendor> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Vendor.VENDOR.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.bros.fooforderingsystem.model.tables.pojos.Vendor> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Vendor.VENDOR.UPDATED_AT, values);
    }
}
